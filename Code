import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk
import ttkthemes
from ttkthemes import ThemedStyle


class ImageViewer:
    """A modern image viewer app with zoom and paint features."""

    def __init__(self, root):
        self.root = root
        self.root.title("Image Viewer")
        self.style = ThemedStyle(self.root)
        self.style.set_theme("clam")

        # Create a frame for the image and the scrollbar
        self.image_frame = tk.Frame(self.root, bg="black")
        self.image_frame.pack(fill=tk.BOTH, expand=True)

        # Create a canvas to display the image
        self.canvas = tk.Canvas(self.image_frame, bg="black", highlightthickness=0)
        self.canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        # Create a scrollbar to scroll the image vertically
        self.scrollbar = tk.Scrollbar(self.image_frame, orient=tk.VERTICAL, command=self.canvas.yview)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # Configure the canvas to use the scrollbar
        self.canvas.configure(yscrollcommand=self.scrollbar.set)
        self.canvas.bind("<Configure>", self.on_canvas_configure)

        # Initialize some variables for painting and zooming
        self.painting = False
        self.last_x = 0
        self.last_y = 0
        self.scale_factor = 1.0

        # Create a menu bar with file and view options
        self.create_menu()

        # Bind some events for painting and zooming on the canvas
        self.bind_events()

    def create_menu(self):
        """Create the menu bar with file and view options."""
        menubar = tk.Menu(self.root, bg="black", fg="white")
        self.root.config(menu=menubar)

        file_menu = tk.Menu(menubar, tearoff=0, bg="black", fg="white")
        file_menu.add_command(label="Open Image", command=self.open_image)
        file_menu.add_command(label="Save Image", command=self.save_image)
        file_menu.add_separator()
        file_menu.add_command(label="Exit", command=self.root.quit)
        menubar.add_cascade(label="File", menu=file_menu)

        view_menu = tk.Menu(menubar, tearoff=0, bg="black", fg="white")
        view_menu.add_command(label="Zoom In", command=self.zoom_in)
        view_menu.add_command(label="Zoom Out", command=self.zoom_out)
        view_menu.add_separator()
        
	# Add some themes to choose from
        themes = ["clam", "arc", "equilux", "plastik"]
	for theme in themes:
	    view_menu.add_command(label=f"Theme: {theme}", command=lambda t=theme: self.change_theme(t))
        
	menubar.add_cascade(label="View", menu=view_menu)

    def bind_events(self):
        """Bind the mouse events for painting on the canvas."""
        
	# Bind the left mouse button for painting
	self.canvas.bind("<ButtonPress-1>", self.start_paint)
	self.canvas.bind("<B1-Motion>", self.draw_paint)
	self.canvas.bind("<ButtonRelease-1>", self.end_paint)

	# Bind the right mouse button for zooming
	self.canvas.bind("<ButtonPress-3>", self.start_zoom)
	self.canvas.bind("<B3-Motion>", self.do_zoom)
	self.canvas.bind("<ButtonRelease-3>", self.end_zoom)

	# Bind the mouse wheel for scrolling and zooming (with Ctrl key)
	self.canvas.bind("<MouseWheel>", self.on_mouse_wheel)

	# Bind the keyboard shortcuts for opening (Ctrl+O), saving (Ctrl+S), zooming in (+), zooming out (-) and exiting (Esc) 
	self.root.bind("<Control-o>", lambda e: self.open_image())
	self.root.bind("<Control-s>", lambda e: self.save_image())
	self.root.bind("<plus>", lambda e: self.zoom_in())
	self.root.bind("<minus>", lambda e: self.zoom_out())
	self.root.bind("<Escape>", lambda e: self.root.quit())

	# Bind the drag and drop feature for opening images
	self.root.drop_target_register(tk.DND_FILES)
	self.root.dnd_bind("<<Drop>>", lambda e: self.drop_image(e.data))

    def open_image(self):
        """Open an image file and display it on the canvas."""
        file_path = filedialog.askopenfilename(filetypes=[("Image Files", "*.png *.jpg *.jpeg *.gif")])
        if file_path:
            try:
                image = Image.open(file_path)
                self.display_image(image)
            except Exception as e:
                messagebox.showerror("Error", f"Failed to open image: {e}")

    def save_image(self):
        """Save the current image to a file."""
        if self.image:
            file_path = filedialog.asksaveasfilename(filetypes=[("Image Files", "*.png *.jpg *.jpeg *.gif")])
            if file_path:
                try:
                    self.image.save(file_path)
                    messagebox.showinfo("Success", f"Image saved to {file_path}")
                except Exception as e:
                    messagebox.showerror("Error", f"Failed to save image: {e}")
        else:
            messagebox.showwarning("Warning", "No image to save")

    def display_image(self, image):
        """Display an image object on the canvas."""
        self.canvas.delete("all")
        self.image = image # store the original image object
        self.current_image = ImageTk.PhotoImage(image) # create a PhotoImage object for the canvas
        self.canvas.create_image(0, 0, anchor=tk.NW, image=self.current_image)
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

    def on_canvas_configure(self, event):
        """Adjust the scroll region of the canvas."""
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

    def start_paint(self, event):
        """Start painting when the left mouse button is pressed."""
        self.painting = True
        self.last_x = event.x
        self.last_y = event.y

    def draw_paint(self, event):
        """Draw a line when the left mouse button is moved."""
        if self.painting:
            self.canvas.create_line(self.last_x, self.last_y, event.x, event.y, fill="white", width=2)
            self.last_x = event.x
            self.last_y = event.y

    def end_paint(self, event):
        """Stop painting when the left mouse button is released."""
        self.painting = False

    def start_zoom(self, event):
        """Start zooming when the right mouse button is pressed."""
        # Store the initial position and scale factor
        self.zoom_x = event.x
        self.zoom_y = event.y
        self.zoom_factor = self.scale_factor

    def do_zoom(self, event):
        """Zoom the image when the right mouse button is moved."""
        
	# Calculate the relative movement of the mouse
	delta_x = event.x - self.zoom_x
	delta_y = event.y - self.zoom_y

	# Adjust the scale factor based on the movement
	self.scale_factor = max(0.1, min(10.0, self.zoom_factor + delta_x / 100 - delta_y / 100))

	# Resize the image based on the scale factor
	width = int(self.image.width * self.scale_factor)
	height = int(self.image.height * self.scale_factor)
	resized_image = self.image.resize((width, height))

	# Display the resized image on the canvas
	self.display_image(resized_image)

    def end_zoom(self, event):
        """Stop zooming when the right mouse button is released."""
        
	# Reset the zoom factor to 1.0
	self.zoom_factor = 1.0

    def zoom_in(self):
        """Zoom in the image by a factor of 1.2."""
        
	# Increase the scale factor by 1.2
	self.scale_factor *= 1.2

	# Resize the image based on the scale factor
	width = int(self.image.width * self.scale_factor)
	height = int(self.image.height * self.scale_factor)
	resized_image = self.image.resize((width, height))

	# Display the resized image on the canvas
	self.display_image(resized_image)

    def zoom_out(self):
        """Zoom out the image by a factor of 0.8."""
        
	# Decrease the scale factor by 0.8
	self.scale_factor *= 0.8

	# Resize the image based on the scale factor
	width = int(self.image.width * self.scale_factor)
	height = int(self.image.height * self.scale_factor)
	resized_image = self.image.resize((width, height))

	# Display the resized image on the canvas
	self.display_image(resized_image)

    def on_mouse_wheel(self, event):
        """Scroll or zoom the image with the mouse wheel."""
        
	if event.state == 0: # no modifier key pressed
	    # Scroll up or down by one unit
	    if event.delta > 0:
	        self.canvas.yview_scroll(-1, "unit")
	    elif event.delta < 0:
	        self.canvas.yview_scroll(1, "unit")
	elif event.state == 4: # Ctrl key pressed
            	    # Zoom in or out by a factor of 1.2 or 0.8
	    if event.delta > 0:
	        self.zoom_in()
	    elif event.delta < 0:
	        self.zoom_out()

    def drop_image(self, data):
        """Open an image file that is dragged and dropped on the root window."""
        file_path = data.strip("{}").replace("\\", "/")
        if file_path:
            try:
                image = Image.open(file_path)
                self.display_image(image)
            except Exception as e:
                messagebox.showerror("Error", f"Failed to open image: {e}")

    def change_theme(self, theme):
        """Change the theme of the app."""
        self.style.set_theme(theme)

    def run(self):
        """Start the main loop of the app."""
        self.root.mainloop()


root = ttkthemes.ThemedTk()
root.configure(bg="black")
app = ImageViewer(root)
app.run()
